#!/usr/bin/env python

import sys

from shlex import split
import subprocess
import argparse
import os

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(title="commands", dest="c1")
init = subparsers.add_parser('init', help='initialize slatelite containers')
init.add_argument('-v', '--volume', dest='volumes', action='append', nargs='?',
                  metavar='hostDir:containerDir', help='Example: `./slatelite init -v ~/workdir:/mnt`')
subparsers.add_parser('pause', help='pause slatelite containers')
subparsers.add_parser('unpause', help='unpause slatelite containers')
destroy = subparsers.add_parser('destroy', help='completely destroy environment')
destroy.add_argument('--rmi', dest='rmi', action='store_true', help='Example: `./slatelite destroy --rmi`')
subparsers.add_parser('status', help='view status of slatelite containers')
build = subparsers.add_parser('build', help='build/rebuild container images')
build.add_argument('c2', metavar='container', nargs='?', choices=[
                   'kube', 'slate', 'nfs'], help='Example: `./slatelite build slate`')
shell = subparsers.add_parser(
    'shell', help='open a shell in a slatelite container')
shell.add_argument('c2', metavar='container', choices=[
                   'kube', 'slate', 'nfs'], help='Example: `./slatelite shell slate`')
slate = subparsers.add_parser('slate', help='run a slate command')
slate.add_argument('c2', metavar='command', nargs=argparse.REMAINDER,
                   help='Example: `./slatelite slate vo list`')
kubectl = subparsers.add_parser('kubectl', help='run a kubectl command')
kubectl.add_argument('c2', metavar='command', nargs=argparse.REMAINDER,
                     help='Example: `./slatelite kubectl get po --all-namespaces`')
exec_ = subparsers.add_parser('exec', help='wrapper of "docker-compose exec"')
exec_.add_argument('c2', metavar='command', nargs=argparse.REMAINDER,
                   help='Example: `./slatelite exec kube ip addr`')
args = parser.parse_args()

try:
  from subprocess import DEVNULL  # py3k
except ImportError:
    DEVNULL = open(os.devnull, 'wb')


def initcheck(initerr='SLATElite is not initialized. Run: `./slatelite init`'):
    if not os.path.isfile('docker-compose.yml'):
        raise EnvironmentError(initerr)


def readycheck(rdyerr='SLATElite has non-ready containers. Is the environment paused?'):
  try:
    subprocess.check_call(split(
        '/bin/sh -c "docker-compose ps | grep Up"'), stdout=DEVNULL, close_fds=True)
  except subprocess.CalledProcessError:
    raise EnvironmentError(rdyerr)


def run(cmd):
  return subprocess.call(split(cmd))


if args.c1 == 'init':
    if os.path.isfile('docker-compose.yml'):
        raise EnvironmentError(
            'SLATElite is already initialized. Run `./slatelite destroy && ./slatelite init` to reset your environment.')
    volumes = []
    if args.volumes:
        for item in args.volumes:
            volumes.append('      - ' + item)
    volumes = '\n'.join(volumes)
    with open('docker-compose-template.yml', 'r') as file:
        contents = file.read()
    contents = contents.replace('# {VOLUMES}', volumes)
    with open('docker-compose.yml', 'w') as file:
        file.write(contents)
        file.flush()
        os.fsync(file)
    if(run('docker-compose up -d') == 0):
      run('docker-compose exec kube ./init.sh')
      run('docker-compose exec slate ./init.sh')
      print "DONE! SLATElite is now initialized."
elif args.c1 == 'pause':
  initcheck()
  readycheck(rdyerr='It appears SLATElite is already paused.')
  run('docker-compose pause')
elif args.c1 == 'unpause':
  initcheck()
  try:
    subprocess.check_call(split(
        '/bin/sh -c "docker-compose ps | grep Paused"'), stdout=DEVNULL, close_fds=True)
  except subprocess.CalledProcessError:
    raise EnvironmentError('SLATElite is not paused.')
  run('docker-compose unpause')
elif args.c1 == 'destroy':
    initcheck()
    run('docker-compose kill -s SIGKILL kube')
    if args.rmi:
      run('docker-compose down -v --rmi local')
    else:
      run('docker-compose down -v')
    os.remove('docker-compose.yml')
elif args.c1 == 'build':
    args.c2 = args.c2 or ''
    if args.c2 == 'kube' or args.c2 == '':
        if not os.path.isfile('kube/hyperkube.tar'):
            print "Caching Hyperkube image"
            run('/bin/sh -c "docker pull k8s.gcr.io/hyperkube:v1.13.0 && \
            docker save -o kube/hyperkube.tar k8s.gcr.io/hyperkube:v1.13.0 && \
            docker rmi k8s.gcr.io/hyperkube:v1.13.0 > /dev/null"')
    run('docker-compose -f docker-compose-template.yml build --no-cache ' + args.c2)
elif args.c1 == 'shell':
  initcheck()
  readycheck()
  run('docker-compose exec ' + args.c2 + ' /bin/bash')
elif args.c1 == 'status':
  initcheck()
  run('docker-compose ps')
elif args.c1 == 'slate':
  initcheck()
  readycheck()
  c2 = ' '.join(args.c2)
  run('docker-compose exec slate slate ' + c2)
elif args.c1 == 'kubectl':
  initcheck()
  readycheck()
  c2 = ' '.join(args.c2)
  run('docker-compose exec slate kubectl ' + c2)
elif args.c1 == 'exec':
  initcheck()
  readycheck()
  c2 = ' '.join(args.c2)
  run('docker-compose exec ' + c2)
else:
  raise ValueError('Invalid argument: ' + args.c1)
